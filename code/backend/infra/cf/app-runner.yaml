AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: App Runner Service for Container Application

Parameters:
  AppName:
    Type: String
    Description: Name of the application
  
  TableName:
    Type: String
    Description: Name of the DynamoDB table
    
  UserPoolId:
    Type: String
    Description: ID of the Cognito User Pool
    
  UserPoolClientId:
    Type: String
    Description: ID of the Cognito User Pool Client
  
  ContainerPort:
    Type: Number
    Default: 3000
    Description: Port on which the container is listening
  
  ImageUri:
    Type: String
    Description: URI of the container image in ECR

Resources:
  # IAM Role for App Runner Service
  AppRunnerServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - build.apprunner.amazonaws.com
                - apigateway.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSAppRunnerServicePolicyForECRAccess
  
  # IAM Role for App Runner Instance
  AppRunnerInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: tasks.apprunner.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSAppRunnerServicePolicyForECRAccess
      Policies:
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:MOMENTO_API_KEYS*
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:BatchGetItem
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:BatchWriteItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TableName}
  
  # App Runner Service
  AppRunnerService:
    Type: AWS::AppRunner::Service
    Properties:
      ServiceName: !Sub ${AppName}-container-service
      InstanceConfiguration:
        Cpu: '1 vCPU'
        Memory: '2 GB'
        InstanceRoleArn: !GetAtt AppRunnerInstanceRole.Arn
      SourceConfiguration:
        AuthenticationConfiguration:
          AccessRoleArn: !GetAtt AppRunnerServiceRole.Arn
        ImageRepository:
          ImageIdentifier: !Ref ImageUri
          ImageRepositoryType: ECR
          ImageConfiguration:
            Port: !Ref ContainerPort
            RuntimeEnvironmentVariables:
              - Name: TABLE_NAME
                Value: !Ref TableName
              - Name: USER_POOL_ID
                Value: !Ref UserPoolId
              - Name: USER_POOL_CLIENT_ID
                Value: !Ref UserPoolClientId
              - Name: NODE_ENV
                Value: production
              - Name: AWS_REGION
                Value: !Ref AWS::Region
            RuntimeEnvironmentSecrets:
              - Name: MOMENTO_API_KEYS
                Value: !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:MOMENTO_API_KEYS
      HealthCheckConfiguration:
        Path: '/health'
        Protocol: 'HTTP'
        HealthyThreshold: 1
        UnhealthyThreshold: 5
        Interval: 5
        Timeout: 2

  # Adding API Gateway for the container service
  ContainerProxyApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: api
      EndpointConfiguration: REGIONAL
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
      DefinitionBody:
        swagger: '2.0'
        info:
          title: !Sub ${AppName}-container-api
        schemes:
          - https
        paths:
          /{proxy+}:
            x-amazon-apigateway-any-method:
              parameters:
                - name: proxy
                  in: path
                  required: true
                  type: string
              responses: {}
              x-amazon-apigateway-integration:
                uri: !Join 
                  - ''
                  - - 'https://'
                    - !GetAtt AppRunnerService.ServiceUrl
                    - '/{proxy}'
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                passthroughBehavior: when_no_match
                httpMethod: ANY
                type: http_proxy
          /events/game-started:
            post:
              x-amazon-apigateway-integration:
                uri: !Join 
                  - ''
                  - - 'https://'
                    - !GetAtt AppRunnerService.ServiceUrl
                    - '/events/game-started'
                responses:
                  default:
                    statusCode: '200'
                timeoutInMillis: 5000
                type: http_proxy
                passthroughBehavior: when_no_match
                httpMethod: POST
                requestParameters:
                  integration.request.header.Content-Type: "'application/json'"
              parameters:
                - name: Content-Type
                  in: header
                  required: true
                  type: string

  # Role that allows EventBridge to invoke API Gateway
  EventBridgeInvokeApiRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: InvokeApiGateway
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: execute-api:Invoke
                Resource: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ContainerProxyApi}/api/POST/events/game-started

  # EventBridge rule to target the API Gateway
  GameEventsRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub ${AppName}-game-events
      Description: "Captures game events and sends them to the container via API Gateway"
      EventBusName: !ImportValue "StatefulStack-EventBusName"
      EventPattern:
        source:
          - "com.gameserviceapp"
        detail-type:
          - gameStarted
      State: ENABLED
      Targets:
        - Id: ApiGatewayTarget
          Arn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ContainerProxyApi}/api/POST/events/game-started
          RoleArn: !GetAtt EventBridgeInvokeApiRole.Arn
          HttpParameters:
            PathParameterValues: []
            QueryStringParameters: {}
            HeaderParameters: {}

Outputs:
  AppRunnerServiceURL:
    Description: URL of the App Runner Service
    Value: !GetAtt AppRunnerService.ServiceUrl
  
  AppRunnerServiceArn:
    Description: ARN of the App Runner Service
    Value: !GetAtt AppRunnerService.ServiceArn
    
  ContainerProxyURL:
    Description: URL for the Container Proxy API
    Value: !Sub https://${ContainerProxyApi}.execute-api.${AWS::Region}.amazonaws.com/api/
    Export:
      Name: !Sub "${AppName}-ContainerProxyURL"
