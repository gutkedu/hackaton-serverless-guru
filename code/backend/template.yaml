AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: URL Shortener Backend Stack

Parameters:
  TableName:
    Type: String
    Description: Name of the DynamoDB table

  UserPoolId:
    Type: String
    Description: ID of the Cognito User Pool

  UserPoolClientId:
    Type: String
    Description: ID of the Cognito User Pool Client

Globals:
  Function:
    Timeout: 10
    MemorySize: 512
    Runtime: nodejs22.x
    CodeUri: .
    Architectures:
      - arm64
    Environment:
      Variables:
        NODE_OPTIONS: --enable-source-maps
        USER_POOL_ID: !Ref UserPoolId
        USER_POOL_CLIENT_ID: !Ref UserPoolClientId
        TABLE_NAME: !Ref TableName

Resources:
  ##########################################################################
  #                              Layers                                    #
  ##########################################################################
  NodejsDepsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: NodejsDepsLayer
      Description: Dependencies for the Nodejs Lambda functions
      ContentUri: ./layers/nodejs-deps
      CompatibleRuntimes:
        - nodejs22.x
    Metadata:
      BuildMethod: nodejs22.x
      BuildArchitectures:
        - arm64

  ##########################################################################
  #                              Functions                                 #
  ##########################################################################
  TokenAuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: TokenAuthorizerFunction
      Description: Validates JWT tokens from Cognito for API Gateway
      Handler: auth/authorizer.handler
      Layers:
        - !Ref NodejsDepsLayer
        - !Sub arn:aws:lambda:${AWS::Region}:094274105915:layer:AWSLambdaPowertoolsTypeScriptV2:17
      Policies:
        - AWSLambdaBasicExecutionRole
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: esnext
        Format: esm
        Sourcemap: true
        OutExtension:
          - .js=.mjs
        EntryPoints:
          - src/lambdas/auth/authorizer.ts
        External:
          - zod
          - aws-jwt-verify
          - '@aws-lambda-powertools/logger'

  RefreshTokenFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: RefreshTokenFunction
      Description: Handles refresh token requests
      Handler: refresh-token.refreshTokenHandler
      Layers:
        - !Ref NodejsDepsLayer
        - !Sub arn:aws:lambda:${AWS::Region}:094274105915:layer:AWSLambdaPowertoolsTypeScriptV2:17
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /auth/refresh-token
            Method: POST
      Policies:
        - AWSLambdaExecute 
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:InitiateAuth
              Resource: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPoolId}
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: esnext
        Format: esm
        Sourcemap: true
        OutExtension:
          - .js=.mjs
        EntryPoints:
          - src/lambdas/auth/refresh-token.ts
        External:
          - zod
          - '@aws-lambda-powertools/logger'
          - '@aws-sdk/client-cognito-identity-provider'
          - '@aws-lambda-powertools/parser'
          - '@middy/core'
          
  SignUpPlayerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: SignUpPlayerFunction
      Description: Handles user signup requests
      Handler: signup-player.signUpPlayerHandler
      Layers:
        - !Ref NodejsDepsLayer
        - !Sub arn:aws:lambda:${AWS::Region}:094274105915:layer:AWSLambdaPowertoolsTypeScriptV2:17
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /auth/signup
            Method: POST
      Policies:
        - AWSLambdaExecute 
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:SignUp
                - events:PutEvents
              Resource: '*'
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:MOMENTO_API_KEYS*
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: esnext
        Format: esm
        Sourcemap: true
        OutExtension:
          - .js=.mjs
        EntryPoints:
          - src/lambdas/auth/signup-player.ts
        External:
          - 'ksuid'
          - 'zod'
          - '@aws-lambda-powertools/parser'
          - '@aws-lambda-powertools/logger'
          - '@middy/secrets-manager'
          - '@middy/core'
          - '@aws-sdk/lib-dynamodb'
          - '@aws-sdk/client-dynamodb'
          - '@aws-sdk/client-cognito-identity-provider'

  SigninFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: SigninFunction
      Description: Handles user signin requests
      Handler: signin.signinHandler
      Layers:
        - !Ref NodejsDepsLayer
        - !Sub arn:aws:lambda:${AWS::Region}:094274105915:layer:AWSLambdaPowertoolsTypeScriptV2:17
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /auth/signin
            Method: POST
      Policies:
        - AWSLambdaExecute 
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:InitiateAuth
              Resource: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPoolId}
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: esnext
        Format: esm
        Sourcemap: true
        OutExtension:
          - .js=.mjs
        EntryPoints:
          - src/lambdas/auth/signin.ts
        External:
          - zod
          - '@aws-lambda-powertools/logger'
          - '@aws-sdk/client-cognito-identity-provider'
          - '@aws-lambda-powertools/parser'
          - '@middy/core'

  ConfirmSignupFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ConfirmSignupFunction
      Description: Handles user confirmation requests
      Handler: confirm-signup.confirmSignupHandler
      Layers:
        - !Ref NodejsDepsLayer
        - !Sub arn:aws:lambda:${AWS::Region}:094274105915:layer:AWSLambdaPowertoolsTypeScriptV2:17
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /auth/confirm-signup
            Method: POST
      Policies:
        - AWSLambdaExecute 
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:ConfirmSignUp
              Resource: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPoolId}
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: esnext
        Format: esm
        Sourcemap: true
        OutExtension:
          - .js=.mjs
        EntryPoints:
          - src/lambdas/auth/confirm-signup.ts
        External:
          - 'zod'
          - 'ksuid'
          - '@aws-lambda-powertools/logger'
          - '@aws-sdk/client-cognito-identity-provider'
          - '@aws-lambda-powertools/parser'
          - '@middy/core'
          - '@aws-sdk/lib-dynamodb'
          - '@aws-sdk/client-dynamodb'

  ForgotPasswordFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ForgotPasswordFunction
      Description: Handles forgot password requests
      Handler: forgot-password.forgotPasswordHandler
      Layers:
        - !Ref NodejsDepsLayer
        - !Sub arn:aws:lambda:${AWS::Region}:094274105915:layer:AWSLambdaPowertoolsTypeScriptV2:17
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /auth/forgot-password
            Method: POST
      Policies:
        - AWSLambdaExecute 
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:ForgotPassword
              Resource: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPoolId}
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: esnext
        Sourcemap: true
        OutExtension:
          - .js=.mjs
        EntryPoints:
          - src/lambdas/auth/forgot-password.ts
        External:
          - zod
          - '@aws-lambda-powertools/logger'
          - '@aws-sdk/client-cognito-identity-provider'
          - '@aws-lambda-powertools/parser'
          - '@middy/core'

  ResetPasswordFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ResetPasswordFunction
      Description: Handles password reset requests
      Handler: reset-password.resetPasswordHandler
      Layers:
        - !Ref NodejsDepsLayer
        - !Sub arn:aws:lambda:${AWS::Region}:094274105915:layer:AWSLambdaPowertoolsTypeScriptV2:17
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /auth/reset-password
            Method: POST
      Policies:
        - AWSLambdaExecute 
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:ConfirmForgotPassword
              Resource: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPoolId}
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: esnext
        Format: esm
        Sourcemap: true
        OutExtension:
          - .js=.mjs
        EntryPoints:
          - src/lambdas/auth/reset-password.ts
        External:
          - 'zod'
          - '@aws-lambda-powertools/logger'
          - '@aws-sdk/client-cognito-identity-provider'
          - '@aws-lambda-powertools/parser'
          - '@middy/core'

  ##########################################################################
  #                          Game Functions                                #
  ##########################################################################
  CreateLobbyFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: CreateLobbyFunction
      Description: Handles creating new game lobbies
      Handler: game/create-lobby.createLobbyHandler
      Layers:
        - !Ref NodejsDepsLayer
        - !Sub arn:aws:lambda:${AWS::Region}:094274105915:layer:AWSLambdaPowertoolsTypeScriptV2:17
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /game/lobbies/create
            Method: POST
            Auth:
              Authorizer: TokenAuthorizer
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: esnext
        Format: esm
        Sourcemap: true
        OutExtension:
          - .js=.mjs
        EntryPoints:
          - src/lambdas/game/create-lobby.ts
        External:
          - 'zod'
          - 'ksuid'
          - '@aws-lambda-powertools/logger'
          - '@middy/core'
          - '@aws-sdk/lib-dynamodb'
          - '@aws-sdk/client-dynamodb'

  ListLobbiesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ListLobbiesFunction
      Description: Handles listing available game lobbies
      Handler: game/list-lobbies.listLobbiesHandler
      Layers:
        - !Ref NodejsDepsLayer
        - !Sub arn:aws:lambda:${AWS::Region}:094274105915:layer:AWSLambdaPowertoolsTypeScriptV2:17
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /game/lobbies
            Method: GET
            Auth:
              Authorizer: TokenAuthorizer
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBReadPolicy:
            TableName: !Ref TableName
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: esnext
        Format: esm
        Sourcemap: true
        OutExtension:
          - .js=.mjs
        EntryPoints:
          - src/lambdas/game/list-lobbies.ts
        External:
          - 'zod'
          - 'ksuid'
          - '@aws-lambda-powertools/logger'
          - '@middy/core'
          - '@aws-sdk/lib-dynamodb'
          - '@aws-sdk/client-dynamodb'

  GetLobbyDetailsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetLobbyDetailsFunction
      Description: Handles getting details for a specific lobby
      Handler: game/get-lobby-details.getLobbyDetailsHandler
      Layers:
        - !Ref NodejsDepsLayer
        - !Sub arn:aws:lambda:${AWS::Region}:094274105915:layer:AWSLambdaPowertoolsTypeScriptV2:17
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /game/lobbies/{id}
            Method: GET
            Auth:
              Authorizer: TokenAuthorizer
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBReadPolicy:
            TableName: !Ref TableName
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: esnext
        Format: esm
        Sourcemap: true
        OutExtension:
          - .js=.mjs
        EntryPoints:
          - src/lambdas/game/get-lobby-details.ts
        External:
          - 'zod'
          - 'ksuid'
          - '@aws-lambda-powertools/logger'
          - '@aws-lambda-powertools/parser'
          - '@middy/core'
          - '@aws-sdk/lib-dynamodb'
          - '@aws-sdk/client-dynamodb'

  JoinLobbyFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: JoinLobbyFunction
      Description: Handles player joining a lobby
      Handler: game/join-lobby.joinLobbyHandler
      Layers:
        - !Ref NodejsDepsLayer
        - !Sub arn:aws:lambda:${AWS::Region}:094274105915:layer:AWSLambdaPowertoolsTypeScriptV2:17
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /game/lobbies/join
            Method: POST
            Auth:
              Authorizer: TokenAuthorizer
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: esnext
        Format: esm
        Sourcemap: true
        OutExtension:
          - .js=.mjs
        EntryPoints:
          - src/lambdas/game/join-lobby.ts
        External:
          - 'zod'
          - 'ksuid'
          - '@aws-lambda-powertools/logger'
          - '@middy/core'
          - '@aws-sdk/lib-dynamodb'
          - '@aws-sdk/client-dynamodb'

  LeaveLobbyFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: LeaveLobbyFunction
      Description: Handles player leaving a lobby
      Handler: game/leave-lobby.leaveLobbyHandler
      Layers:
        - !Ref NodejsDepsLayer
        - !Sub arn:aws:lambda:${AWS::Region}:094274105915:layer:AWSLambdaPowertoolsTypeScriptV2:17
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /game/lobbies/leave
            Method: POST
            Auth:
              Authorizer: TokenAuthorizer
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: esnext
        Format: esm
        Sourcemap: true
        OutExtension:
          - .js=.mjs
        EntryPoints:
          - src/lambdas/game/leave-lobby.ts
        External:
          - 'zod'
          - 'ksuid'
          - '@aws-lambda-powertools/logger'
          - '@middy/core'
          - '@aws-sdk/lib-dynamodb'
          - '@aws-sdk/client-dynamodb'

  ##########################################################################
  #                              API Gateway                               #
  ##########################################################################
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: api
      EndpointConfiguration:
        Type: REGIONAL
      Auth:
        Authorizers:
          TokenAuthorizer:
            FunctionArn: !GetAtt TokenAuthorizerFunction.Arn
            Identity:
              Header: Authorization
              ReauthorizeEvery: 1800
      Cors:
        AllowMethods: "'GET,POST,OPTIONS'"
        AllowHeaders: "'Content-Type,Authorization'"
        AllowOrigin: "'*'"

Outputs:
  ApiGatewayURL:
    Description: URL for the API Gateway
    Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/api/